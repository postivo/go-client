// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/postivo/go-client/models/components"
	"github.com/postivo/go-client/optionalnullable"
)

// DocumentType - Type of document/certificate to generate.
type DocumentType string

const (
	// DocumentTypeDispatchCert Dispatch confirmation certificate
	DocumentTypeDispatchCert DocumentType = "dispatch_cert"
	// DocumentTypeEnvelope Envelope template preview
	DocumentTypeEnvelope DocumentType = "envelope"
	// DocumentTypeEpoPdf EPO certificate in PDF format (Elektroniczne Potwierdzenie Odbioru)
	DocumentTypeEpoPdf DocumentType = "epo_pdf"
	// DocumentTypeEpoXML EPO certificate in XML format (Elektroniczne Potwierdzenie Odbioru)
	DocumentTypeEpoXML DocumentType = "epo_xml"
)

func (e DocumentType) ToPointer() *DocumentType {
	return &e
}
func (e *DocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dispatch_cert":
		fallthrough
	case "envelope":
		fallthrough
	case "epo_pdf":
		fallthrough
	case "epo_xml":
		*e = DocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentType: %v", v)
	}
}

type GetDocumentsRequest struct {
	// Single shipment ID assigned by the system when the shipment was created.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Type of document/certificate to generate.
	Type DocumentType `pathParam:"style=simple,explode=false,name=type"`
}

func (g *GetDocumentsRequest) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetDocumentsRequest) GetType() DocumentType {
	if g == nil {
		return DocumentType("")
	}
	return g.Type
}

type GetDocumentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request was processed successfully. The document content is included in the response body.
	DocumentResponse *components.DocumentResponse
	// Invalid request.
	ErrorResponse optionalnullable.OptionalNullable[components.ErrorResponse]
	Headers       map[string][]string
}

func (g *GetDocumentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GetDocumentsResponse) GetDocumentResponse() *components.DocumentResponse {
	if g == nil {
		return nil
	}
	return g.DocumentResponse
}

func (g *GetDocumentsResponse) GetErrorResponse() optionalnullable.OptionalNullable[components.ErrorResponse] {
	if g == nil {
		return nil
	}
	return g.ErrorResponse
}

func (g *GetDocumentsResponse) GetHeaders() map[string][]string {
	if g == nil {
		return map[string][]string{}
	}
	return g.Headers
}
