// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/postivo/go-client/internal/utils"
	"github.com/postivo/go-client/models/components"
	"github.com/postivo/go-client/optionalnullable"
)

// ContactHandling - How to handle contacts that belong to the group.
type ContactHandling string

const (
	// ContactHandlingDetach Detach contacts from the removed group; keep them in the Address Book.
	ContactHandlingDetach ContactHandling = "detach"
	// ContactHandlingDelete Delete the group and also remove contacts that belong only to this group.
	ContactHandlingDelete ContactHandling = "delete"
)

func (e ContactHandling) ToPointer() *ContactHandling {
	return &e
}
func (e *ContactHandling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "detach":
		fallthrough
	case "delete":
		*e = ContactHandling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContactHandling: %v", v)
	}
}

type DeleteGroupRequest struct {
	// Group `id` to remove.
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// How to handle contacts that belong to the group.
	Contacts *ContactHandling `default:"detach" queryParam:"style=form,explode=true,name=contacts"`
}

func (d DeleteGroupRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeleteGroupRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (d *DeleteGroupRequest) GetID() int64 {
	if d == nil {
		return 0
	}
	return d.ID
}

func (d *DeleteGroupRequest) GetContacts() *ContactHandling {
	if d == nil {
		return nil
	}
	return d.Contacts
}

type DeleteGroupResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Invalid request.
	ErrorResponse optionalnullable.OptionalNullable[components.ErrorResponse]
	Headers       map[string][]string
}

func (d *DeleteGroupResponse) GetHTTPMeta() components.HTTPMetadata {
	if d == nil {
		return components.HTTPMetadata{}
	}
	return d.HTTPMeta
}

func (d *DeleteGroupResponse) GetErrorResponse() optionalnullable.OptionalNullable[components.ErrorResponse] {
	if d == nil {
		return nil
	}
	return d.ErrorResponse
}

func (d *DeleteGroupResponse) GetHeaders() map[string][]string {
	if d == nil {
		return map[string][]string{}
	}
	return d.Headers
}
