// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/postivo/go-client/internal/utils"
)

type DocumentsType string

const (
	DocumentsTypeDocumentPdf     DocumentsType = "DocumentPdf"
	DocumentsTypeDocumentLibrary DocumentsType = "DocumentLibrary"
	DocumentsTypeDocumentMock    DocumentsType = "DocumentMock"
)

// Documents - A base document object.
type Documents struct {
	DocumentPdf     *DocumentPdf     `queryParam:"inline,name=Documents"`
	DocumentLibrary *DocumentLibrary `queryParam:"inline,name=Documents"`
	DocumentMock    *DocumentMock    `queryParam:"inline,name=Documents"`

	Type DocumentsType
}

func CreateDocumentsDocumentPdf(documentPdf DocumentPdf) Documents {
	typ := DocumentsTypeDocumentPdf

	return Documents{
		DocumentPdf: &documentPdf,
		Type:        typ,
	}
}

func CreateDocumentsDocumentLibrary(documentLibrary DocumentLibrary) Documents {
	typ := DocumentsTypeDocumentLibrary

	return Documents{
		DocumentLibrary: &documentLibrary,
		Type:            typ,
	}
}

func CreateDocumentsDocumentMock(documentMock DocumentMock) Documents {
	typ := DocumentsTypeDocumentMock

	return Documents{
		DocumentMock: &documentMock,
		Type:         typ,
	}
}

func (u *Documents) UnmarshalJSON(data []byte) error {

	var documentPdf DocumentPdf = DocumentPdf{}
	if err := utils.UnmarshalJSON(data, &documentPdf, "", true, nil); err == nil {
		u.DocumentPdf = &documentPdf
		u.Type = DocumentsTypeDocumentPdf
		return nil
	}

	var documentLibrary DocumentLibrary = DocumentLibrary{}
	if err := utils.UnmarshalJSON(data, &documentLibrary, "", true, nil); err == nil {
		u.DocumentLibrary = &documentLibrary
		u.Type = DocumentsTypeDocumentLibrary
		return nil
	}

	var documentMock DocumentMock = DocumentMock{}
	if err := utils.UnmarshalJSON(data, &documentMock, "", true, nil); err == nil {
		u.DocumentMock = &documentMock
		u.Type = DocumentsTypeDocumentMock
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Documents", string(data))
}

func (u Documents) MarshalJSON() ([]byte, error) {
	if u.DocumentPdf != nil {
		return utils.MarshalJSON(u.DocumentPdf, "", true)
	}

	if u.DocumentLibrary != nil {
		return utils.MarshalJSON(u.DocumentLibrary, "", true)
	}

	if u.DocumentMock != nil {
		return utils.MarshalJSON(u.DocumentMock, "", true)
	}

	return nil, errors.New("could not marshal union type Documents: all fields are null")
}
