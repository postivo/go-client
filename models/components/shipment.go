// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/postivo/go-client/internal/utils"
	"github.com/postivo/go-client/optionalnullable"
	"github.com/postivo/go-client/types"
)

type ShipmentRecipientsType string

const (
	ShipmentRecipientsTypeRecipients        ShipmentRecipientsType = "Recipients"
	ShipmentRecipientsTypeArrayOfRecipients ShipmentRecipientsType = "arrayOfRecipients"
)

// ShipmentRecipients - Recipient data for a single shipment. For one recipient, provide a `RecipientInline`, `RecipientFromAddressBook`, or `RecipientFromAddressBookByExternalId` object. For multiple recipients, provide an array of these objects (1–50).
type ShipmentRecipients struct {
	Recipients        *Recipients  `queryParam:"inline,name=recipients"`
	ArrayOfRecipients []Recipients `queryParam:"inline,name=recipients"`

	Type ShipmentRecipientsType
}

func CreateShipmentRecipientsRecipients(recipients Recipients) ShipmentRecipients {
	typ := ShipmentRecipientsTypeRecipients

	return ShipmentRecipients{
		Recipients: &recipients,
		Type:       typ,
	}
}

func CreateShipmentRecipientsArrayOfRecipients(arrayOfRecipients []Recipients) ShipmentRecipients {
	typ := ShipmentRecipientsTypeArrayOfRecipients

	return ShipmentRecipients{
		ArrayOfRecipients: arrayOfRecipients,
		Type:              typ,
	}
}

func (u *ShipmentRecipients) UnmarshalJSON(data []byte) error {

	var recipients Recipients = Recipients{}
	if err := utils.UnmarshalJSON(data, &recipients, "", true, nil); err == nil {
		u.Recipients = &recipients
		u.Type = ShipmentRecipientsTypeRecipients
		return nil
	}

	var arrayOfRecipients []Recipients = []Recipients{}
	if err := utils.UnmarshalJSON(data, &arrayOfRecipients, "", true, nil); err == nil {
		u.ArrayOfRecipients = arrayOfRecipients
		u.Type = ShipmentRecipientsTypeArrayOfRecipients
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ShipmentRecipients", string(data))
}

func (u ShipmentRecipients) MarshalJSON() ([]byte, error) {
	if u.Recipients != nil {
		return utils.MarshalJSON(u.Recipients, "", true)
	}

	if u.ArrayOfRecipients != nil {
		return utils.MarshalJSON(u.ArrayOfRecipients, "", true)
	}

	return nil, errors.New("could not marshal union type ShipmentRecipients: all fields are null")
}

type ShipmentDocumentsType string

const (
	ShipmentDocumentsTypeDocuments        ShipmentDocumentsType = "Documents"
	ShipmentDocumentsTypeArrayOfDocuments ShipmentDocumentsType = "arrayOfDocuments"
)

// ShipmentDocuments - Document payload to print and enclose into shipment. For a single document, provide `DocumentPdf`, `DocumentLibrary`, or `DocumentMock` (for checking the price only). For multiple documents, provide an array of `DocumentPdf`, `DocumentLibrary`, or `DocumentMock` objects (1–20).
type ShipmentDocuments struct {
	Documents        *Documents  `queryParam:"inline,name=documents"`
	ArrayOfDocuments []Documents `queryParam:"inline,name=documents"`

	Type ShipmentDocumentsType
}

func CreateShipmentDocumentsDocuments(documents Documents) ShipmentDocuments {
	typ := ShipmentDocumentsTypeDocuments

	return ShipmentDocuments{
		Documents: &documents,
		Type:      typ,
	}
}

func CreateShipmentDocumentsArrayOfDocuments(arrayOfDocuments []Documents) ShipmentDocuments {
	typ := ShipmentDocumentsTypeArrayOfDocuments

	return ShipmentDocuments{
		ArrayOfDocuments: arrayOfDocuments,
		Type:             typ,
	}
}

func (u *ShipmentDocuments) UnmarshalJSON(data []byte) error {

	var documents Documents = Documents{}
	if err := utils.UnmarshalJSON(data, &documents, "", true, nil); err == nil {
		u.Documents = &documents
		u.Type = ShipmentDocumentsTypeDocuments
		return nil
	}

	var arrayOfDocuments []Documents = []Documents{}
	if err := utils.UnmarshalJSON(data, &arrayOfDocuments, "", true, nil); err == nil {
		u.ArrayOfDocuments = arrayOfDocuments
		u.Type = ShipmentDocumentsTypeArrayOfDocuments
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ShipmentDocuments", string(data))
}

func (u ShipmentDocuments) MarshalJSON() ([]byte, error) {
	if u.Documents != nil {
		return utils.MarshalJSON(u.Documents, "", true)
	}

	if u.ArrayOfDocuments != nil {
		return utils.MarshalJSON(u.ArrayOfDocuments, "", true)
	}

	return nil, errors.New("could not marshal union type ShipmentDocuments: all fields are null")
}

// InlineConfig - Shipment configuration parameters. Overrides settings loaded from `predefined_config_id`.
type InlineConfig struct {
	// Preferred carrier identifier.
	CarrierID int64 `json:"carrier_id"`
	// Preferred service identifier (shipment type).
	ServiceID int64 `json:"service_id"`
	// Preferred paper type identifier.
	PaperID *int64 `json:"paper_id,omitempty"`
	// Print documents in color (`true`) or grayscale (`false`).
	ColorPrint *bool `json:"color_print,omitempty"`
	// Print documents duplex (`true`) or single-sided (`false`).
	DuplexPrint *bool `json:"duplex_print,omitempty"`
	// Preferred envelope size/template identifier defined in the user account.
	EnvelopeID *int64 `json:"envelope_id,omitempty"`
	// Print the envelope in color (`true`) or grayscale (`false`).
	EnvelopeColorPrint *bool `json:"envelope_color_print,omitempty"`
}

func (i InlineConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InlineConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"carrier_id", "service_id"}); err != nil {
		return err
	}
	return nil
}

func (i *InlineConfig) GetCarrierID() int64 {
	if i == nil {
		return 0
	}
	return i.CarrierID
}

func (i *InlineConfig) GetServiceID() int64 {
	if i == nil {
		return 0
	}
	return i.ServiceID
}

func (i *InlineConfig) GetPaperID() *int64 {
	if i == nil {
		return nil
	}
	return i.PaperID
}

func (i *InlineConfig) GetColorPrint() *bool {
	if i == nil {
		return nil
	}
	return i.ColorPrint
}

func (i *InlineConfig) GetDuplexPrint() *bool {
	if i == nil {
		return nil
	}
	return i.DuplexPrint
}

func (i *InlineConfig) GetEnvelopeID() *int64 {
	if i == nil {
		return nil
	}
	return i.EnvelopeID
}

func (i *InlineConfig) GetEnvelopeColorPrint() *bool {
	if i == nil {
		return nil
	}
	return i.EnvelopeColorPrint
}

type InlineConfigUnionType string

const (
	InlineConfigUnionTypeInlineConfig InlineConfigUnionType = "InlineConfig"
)

type InlineConfigUnion struct {
	InlineConfig *InlineConfig `queryParam:"inline,name=inline_config"`

	Type InlineConfigUnionType
}

func CreateInlineConfigUnionInlineConfig(inlineConfig InlineConfig) InlineConfigUnion {
	typ := InlineConfigUnionTypeInlineConfig

	return InlineConfigUnion{
		InlineConfig: &inlineConfig,
		Type:         typ,
	}
}

func (u *InlineConfigUnion) UnmarshalJSON(data []byte) error {

	var inlineConfig InlineConfig = InlineConfig{}
	if err := utils.UnmarshalJSON(data, &inlineConfig, "", true, nil); err == nil {
		u.InlineConfig = &inlineConfig
		u.Type = InlineConfigUnionTypeInlineConfig
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InlineConfigUnion", string(data))
}

func (u InlineConfigUnion) MarshalJSON() ([]byte, error) {
	if u.InlineConfig != nil {
		return utils.MarshalJSON(u.InlineConfig, "", true)
	}

	return nil, errors.New("could not marshal union type InlineConfigUnion: all fields are null")
}

// Callback - Per-shipment callback configuration. When set, overrides the global callback defined in the user account.
type Callback struct {
	// Callback target URL.
	URL string `json:"url"`
	// Bearer token to include in callback requests for authentication.
	UserToken optionalnullable.OptionalNullable[string] `default:"null" json:"user_token"`
}

func (c Callback) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Callback) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"url"}); err != nil {
		return err
	}
	return nil
}

func (c *Callback) GetURL() string {
	if c == nil {
		return ""
	}
	return c.URL
}

func (c *Callback) GetUserToken() optionalnullable.OptionalNullable[string] {
	if c == nil {
		return nil
	}
	return c.UserToken
}

type CallbackUnionType string

const (
	CallbackUnionTypeCallback CallbackUnionType = "Callback"
)

type CallbackUnion struct {
	Callback *Callback `queryParam:"inline,name=callback"`

	Type CallbackUnionType
}

func CreateCallbackUnionCallback(callback Callback) CallbackUnion {
	typ := CallbackUnionTypeCallback

	return CallbackUnion{
		Callback: &callback,
		Type:     typ,
	}
}

func (u *CallbackUnion) UnmarshalJSON(data []byte) error {

	var callback Callback = Callback{}
	if err := utils.UnmarshalJSON(data, &callback, "", true, nil); err == nil {
		u.Callback = &callback
		u.Type = CallbackUnionTypeCallback
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CallbackUnion", string(data))
}

func (u CallbackUnion) MarshalJSON() ([]byte, error) {
	if u.Callback != nil {
		return utils.MarshalJSON(u.Callback, "", true)
	}

	return nil, errors.New("could not marshal union type CallbackUnion: all fields are null")
}

// MiscInfo - Additional shipment metadata. At least one of `order_name` or `mpk` must be provided.
type MiscInfo struct {
	// MPK (“miejsce powstania kosztu”) — billing cost-center identifier to be included on invoices.
	Mpk optionalnullable.OptionalNullable[string] `default:"null" json:"mpk"`
	// Order name assigned to this shipment; displayed in reports and related views.
	OrderName optionalnullable.OptionalNullable[string] `default:"null" json:"order_name"`
}

func (m MiscInfo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MiscInfo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (m *MiscInfo) GetMpk() optionalnullable.OptionalNullable[string] {
	if m == nil {
		return nil
	}
	return m.Mpk
}

func (m *MiscInfo) GetOrderName() optionalnullable.OptionalNullable[string] {
	if m == nil {
		return nil
	}
	return m.OrderName
}

type MiscInfoUnionType string

const (
	MiscInfoUnionTypeMiscInfo MiscInfoUnionType = "MiscInfo"
)

type MiscInfoUnion struct {
	MiscInfo *MiscInfo `queryParam:"inline,name=misc_info"`

	Type MiscInfoUnionType
}

func CreateMiscInfoUnionMiscInfo(miscInfo MiscInfo) MiscInfoUnion {
	typ := MiscInfoUnionTypeMiscInfo

	return MiscInfoUnion{
		MiscInfo: &miscInfo,
		Type:     typ,
	}
}

func (u *MiscInfoUnion) UnmarshalJSON(data []byte) error {

	var miscInfo MiscInfo = MiscInfo{}
	if err := utils.UnmarshalJSON(data, &miscInfo, "", true, nil); err == nil {
		u.MiscInfo = &miscInfo
		u.Type = MiscInfoUnionTypeMiscInfo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MiscInfoUnion", string(data))
}

func (u MiscInfoUnion) MarshalJSON() ([]byte, error) {
	if u.MiscInfo != nil {
		return utils.MarshalJSON(u.MiscInfo, "", true)
	}

	return nil, errors.New("could not marshal union type MiscInfoUnion: all fields are null")
}

// ShipmentOptions - Additional shipment settings.
type ShipmentOptions struct {
	// ID of the shipment configuration profile stored in the user account.
	PredefinedConfigID optionalnullable.OptionalNullable[int64]             `json:"predefined_config_id,omitempty"`
	InlineConfig       optionalnullable.OptionalNullable[InlineConfigUnion] `json:"inline_config,omitempty"`
	// ID of the sender stored in the user account.
	SenderID optionalnullable.OptionalNullable[int64] `json:"sender_id,omitempty"`
	// Scheduled dispatch date (ISO 8601).
	DispatchDate *types.Date                                      `json:"dispatch_date,omitempty"`
	Callback     optionalnullable.OptionalNullable[CallbackUnion] `json:"callback,omitempty"`
	MiscInfo     optionalnullable.OptionalNullable[MiscInfoUnion] `json:"misc_info,omitempty"`
	// If true, rotate all documents 180° before printing (barcodes will be printed on opposite margins).
	RotateDocuments *bool `json:"rotate_documents,omitempty"`
}

func (s ShipmentOptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ShipmentOptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *ShipmentOptions) GetPredefinedConfigID() optionalnullable.OptionalNullable[int64] {
	if s == nil {
		return nil
	}
	return s.PredefinedConfigID
}

func (s *ShipmentOptions) GetInlineConfig() optionalnullable.OptionalNullable[InlineConfigUnion] {
	if s == nil {
		return nil
	}
	return s.InlineConfig
}

func (s *ShipmentOptions) GetSenderID() optionalnullable.OptionalNullable[int64] {
	if s == nil {
		return nil
	}
	return s.SenderID
}

func (s *ShipmentOptions) GetDispatchDate() *types.Date {
	if s == nil {
		return nil
	}
	return s.DispatchDate
}

func (s *ShipmentOptions) GetCallback() optionalnullable.OptionalNullable[CallbackUnion] {
	if s == nil {
		return nil
	}
	return s.Callback
}

func (s *ShipmentOptions) GetMiscInfo() optionalnullable.OptionalNullable[MiscInfoUnion] {
	if s == nil {
		return nil
	}
	return s.MiscInfo
}

func (s *ShipmentOptions) GetRotateDocuments() *bool {
	if s == nil {
		return nil
	}
	return s.RotateDocuments
}

type OptionsObjType string

const (
	OptionsObjTypeShipmentOptions OptionsObjType = "ShipmentOptions"
)

type OptionsObj struct {
	ShipmentOptions *ShipmentOptions `queryParam:"inline,name=options"`

	Type OptionsObjType
}

func CreateOptionsObjShipmentOptions(shipmentOptions ShipmentOptions) OptionsObj {
	typ := OptionsObjTypeShipmentOptions

	return OptionsObj{
		ShipmentOptions: &shipmentOptions,
		Type:            typ,
	}
}

func (u *OptionsObj) UnmarshalJSON(data []byte) error {

	var shipmentOptions ShipmentOptions = ShipmentOptions{}
	if err := utils.UnmarshalJSON(data, &shipmentOptions, "", true, nil); err == nil {
		u.ShipmentOptions = &shipmentOptions
		u.Type = OptionsObjTypeShipmentOptions
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OptionsObj", string(data))
}

func (u OptionsObj) MarshalJSON() ([]byte, error) {
	if u.ShipmentOptions != nil {
		return utils.MarshalJSON(u.ShipmentOptions, "", true)
	}

	return nil, errors.New("could not marshal union type OptionsObj: all fields are null")
}

// Shipment - Properties of a new shipment.
type Shipment struct {
	// Recipient data for a single shipment. For one recipient, provide a `RecipientInline`, `RecipientFromAddressBook`, or `RecipientFromAddressBookByExternalId` object. For multiple recipients, provide an array of these objects (1–50).
	Recipients ShipmentRecipients `json:"recipients"`
	// Document payload to print and enclose into shipment. For a single document, provide `DocumentPdf`, `DocumentLibrary`, or `DocumentMock` (for checking the price only). For multiple documents, provide an array of `DocumentPdf`, `DocumentLibrary`, or `DocumentMock` objects (1–20).
	Documents ShipmentDocuments                             `json:"documents"`
	Options   optionalnullable.OptionalNullable[OptionsObj] `json:"options,omitempty"`
}

func (s *Shipment) GetRecipients() ShipmentRecipients {
	if s == nil {
		return ShipmentRecipients{}
	}
	return s.Recipients
}

func (s *Shipment) GetDocuments() ShipmentDocuments {
	if s == nil {
		return ShipmentDocuments{}
	}
	return s.Documents
}

func (s *Shipment) GetOptions() optionalnullable.OptionalNullable[OptionsObj] {
	if s == nil {
		return nil
	}
	return s.Options
}
