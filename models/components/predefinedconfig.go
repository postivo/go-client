// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// PredefinedConfig - Predefined configuration usable for dispatching shipments (referenced via `predefined_config_id`).
type PredefinedConfig struct {
	// Unique predefined configuration ID.
	ID *int64 `json:"id,omitempty"`
	// Predefined configuration name.
	Name *string `json:"name,omitempty"`
	// Paper type name.
	PaperName *string `json:"paper_name,omitempty"`
	// Print documents in color (`true`) or grayscale (`false`).
	ColorPrint *bool `json:"color_print,omitempty"`
	// Print documents duplex (`true`) or single-sided (`false`).
	DuplexPrint *bool `json:"duplex_print,omitempty"`
	// Preferred envelope type name.
	EnvelopeName *string `json:"envelope_name,omitempty"`
	// Preferred envelope size.
	EnvelopeSize *string `json:"envelope_size,omitempty"`
	// Envelope group name.
	EnvelopeGroupName *string `json:"envelope_group_name,omitempty"`
	// Print the envelope in color (`true`) or grayscale (`false`).
	EnvelopeColorPrint *bool `json:"envelope_color_print,omitempty"`
}

func (p *PredefinedConfig) GetID() *int64 {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PredefinedConfig) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PredefinedConfig) GetPaperName() *string {
	if p == nil {
		return nil
	}
	return p.PaperName
}

func (p *PredefinedConfig) GetColorPrint() *bool {
	if p == nil {
		return nil
	}
	return p.ColorPrint
}

func (p *PredefinedConfig) GetDuplexPrint() *bool {
	if p == nil {
		return nil
	}
	return p.DuplexPrint
}

func (p *PredefinedConfig) GetEnvelopeName() *string {
	if p == nil {
		return nil
	}
	return p.EnvelopeName
}

func (p *PredefinedConfig) GetEnvelopeSize() *string {
	if p == nil {
		return nil
	}
	return p.EnvelopeSize
}

func (p *PredefinedConfig) GetEnvelopeGroupName() *string {
	if p == nil {
		return nil
	}
	return p.EnvelopeGroupName
}

func (p *PredefinedConfig) GetEnvelopeColorPrint() *bool {
	if p == nil {
		return nil
	}
	return p.EnvelopeColorPrint
}
