// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/postivo/go-client/optionalnullable"
)

type MetadataResponseService struct {
	// Unique service (dispatch type) identifier.
	ServiceID *int64 `json:"service_id,omitempty"`
	// Service (dispatch type) name.
	ServiceName *string `json:"service_name,omitempty"`
	// Return fee charged when the shipment is returned.
	ServiceReturnFee *float32 `json:"service_return_fee,omitempty"`
}

func (m *MetadataResponseService) GetServiceID() *int64 {
	if m == nil {
		return nil
	}
	return m.ServiceID
}

func (m *MetadataResponseService) GetServiceName() *string {
	if m == nil {
		return nil
	}
	return m.ServiceName
}

func (m *MetadataResponseService) GetServiceReturnFee() *float32 {
	if m == nil {
		return nil
	}
	return m.ServiceReturnFee
}

type MetadataResponseCarrier struct {
	// Unique carrier identifier.
	CarrierID *int64 `json:"carrier_id,omitempty"`
	// Carrier display name.
	CarrierName *string `json:"carrier_name,omitempty"`
	// Services (dispatch types) available for this carrier.
	Services []MetadataResponseService `json:"services,omitempty"`
}

func (m *MetadataResponseCarrier) GetCarrierID() *int64 {
	if m == nil {
		return nil
	}
	return m.CarrierID
}

func (m *MetadataResponseCarrier) GetCarrierName() *string {
	if m == nil {
		return nil
	}
	return m.CarrierName
}

func (m *MetadataResponseCarrier) GetServices() []MetadataResponseService {
	if m == nil {
		return nil
	}
	return m.Services
}

type Paper struct {
	// Unique paper type identifier.
	PaperID *int64 `json:"paper_id,omitempty"`
	// Paper type name.
	PaperName *string `json:"paper_name,omitempty"`
}

func (p *Paper) GetPaperID() *int64 {
	if p == nil {
		return nil
	}
	return p.PaperID
}

func (p *Paper) GetPaperName() *string {
	if p == nil {
		return nil
	}
	return p.PaperName
}

type Envelope struct {
	// Unique envelope template identifier.
	EnvelopeID *int64 `json:"envelope_id,omitempty"`
	// Envelope template name.
	EnvelopeName *string `json:"envelope_name,omitempty"`
	// Maximum number of sheets supported by this envelope type.
	MaxSheets *int64 `json:"max_sheets,omitempty"`
}

func (e *Envelope) GetEnvelopeID() *int64 {
	if e == nil {
		return nil
	}
	return e.EnvelopeID
}

func (e *Envelope) GetEnvelopeName() *string {
	if e == nil {
		return nil
	}
	return e.EnvelopeName
}

func (e *Envelope) GetMaxSheets() *int64 {
	if e == nil {
		return nil
	}
	return e.MaxSheets
}

type EnvelopeTemplate struct {
	// Envelope template group name.
	EnvelopeGroupName *string `json:"envelope_group_name,omitempty"`
	// Envelope template group description.
	EnvelopeGroupDescription *string `json:"envelope_group_description,omitempty"`
	// Envelope templates in this group.
	Envelope []Envelope `json:"envelope,omitempty"`
}

func (e *EnvelopeTemplate) GetEnvelopeGroupName() *string {
	if e == nil {
		return nil
	}
	return e.EnvelopeGroupName
}

func (e *EnvelopeTemplate) GetEnvelopeGroupDescription() *string {
	if e == nil {
		return nil
	}
	return e.EnvelopeGroupDescription
}

func (e *EnvelopeTemplate) GetEnvelope() []Envelope {
	if e == nil {
		return nil
	}
	return e.Envelope
}

type StatusCode struct {
	// Unique status code.
	Code *string `json:"code,omitempty"`
	// Status name.
	Name *string `json:"name,omitempty"`
	// Status description.
	Description *string `json:"description,omitempty"`
}

func (s *StatusCode) GetCode() *string {
	if s == nil {
		return nil
	}
	return s.Code
}

func (s *StatusCode) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *StatusCode) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

// MetadataResponse - Metadata response.
type MetadataResponse struct {
	// List of carriers and their available services.
	Carriers optionalnullable.OptionalNullable[[]MetadataResponseCarrier] `json:"carriers,omitempty"`
	// Available paper types.
	Papers optionalnullable.OptionalNullable[[]Paper] `json:"papers,omitempty"`
	// Envelope template groups, each containing related templates.
	EnvelopeTemplates optionalnullable.OptionalNullable[[]EnvelopeTemplate] `json:"envelope_templates,omitempty"`
	// Available status codes.
	StatusCodes optionalnullable.OptionalNullable[[]StatusCode] `json:"status_codes,omitempty"`
}

func (m *MetadataResponse) GetCarriers() optionalnullable.OptionalNullable[[]MetadataResponseCarrier] {
	if m == nil {
		return nil
	}
	return m.Carriers
}

func (m *MetadataResponse) GetPapers() optionalnullable.OptionalNullable[[]Paper] {
	if m == nil {
		return nil
	}
	return m.Papers
}

func (m *MetadataResponse) GetEnvelopeTemplates() optionalnullable.OptionalNullable[[]EnvelopeTemplate] {
	if m == nil {
		return nil
	}
	return m.EnvelopeTemplates
}

func (m *MetadataResponse) GetStatusCodes() optionalnullable.OptionalNullable[[]StatusCode] {
	if m == nil {
		return nil
	}
	return m.StatusCodes
}
